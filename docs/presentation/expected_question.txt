### Question

1. 검색 어떻게 구현??

빠른 검색을 도와주는 `PostgreSQL FTS`는 `to_tsvector`과 `GIN` 인덱스가 합쳐져서 구현됩니다.
`to_tsvector`로 제목과 요약을 단어 단위로 쪼개 `tsv` column에 저장했고 데이터가 저장되거나 수정될 때마다 자동 갱신(trigger 함수)되게 했습니다.
`GIN` 인덱스를 `tsv` column에 붙여 검색을 빠르게 처리하고, `pg_trgm` 인덱스를 제목과 요약 column에 붙여 유사 단어도 즉시 찾을 수 있게 했습니다.
(여기서 `GIN`은 정확한 단어를 매칭합니다. `pg_trgm`은 유사 단어 매칭이라 책에서의 목차/색인을 붙이는 것으로 생각하시면 됩니다).

2. Supabase 마이그레이션 관리 기능

Supabase CLI를 활용해 데이터베이스 스키마 변경 사항을 마이그레이션 파일로 관리해서 버전 관리가 가능하게 했음

3. 규칙 기반 요약이라고 했는데 어떻게 규칙을 정의했나요??

기사들을 보시면 기사가 말하고자 하는 주제가 본문 2~3줄에 정의되는 경우가 대부분이었습니다. 그래서 스크래핑한 기사 본문 상단에서 180자 이내의 문장을 끊어낸 다음 문장 마침 기호를 기준으로 문장을 나눴습니다.

4. 스크래핑하면 같은 기사가 중복될 수 있는데 이건 어떻게 해결했나요??

기사 url에 SHA1 해시를 적용해서 id column으로 활용했습니다. 이로 인해 동일한 기사가 수집되더라도 id로 비교해서 제외시킬 수 있었습니다.

5.  view란?

하나 이상의 기본 테이블에서 선택된 데이터를 기반으로 생성되는 가상 테이블

6. 어려운 점

기사를 스크래핑할 때 데이터를 제대로 수집했는지 관련 없는 내용이 수집되진 않았는지 같은 예외 사항들을 제외시키는 것이 제일 어려웠습니다.

7. 저작권 문제

당연히 기사 본문을 그대로 사용하는 것은 저작권 침해이고 뉴스 기사의 사실 관계는 저작권 보호를 받지 않지만 기자의 기사 작성 방식과 문장 표현 같은 문장의 창작적 표현은 저작권으로 보호됩니다. 그러므로 여러 기사를 취합해 완전히 새로 작성된 요약은 합법 가능성이 큽니다. 하지만 리스크를 줄이기 위해서는 언론사와 제휴를 맺는 것이 가장 좋은 방법입니다.